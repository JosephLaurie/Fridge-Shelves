import numpy as np
import matplotlib.pyplot as plt
''' AIMS:
    Create an engine to simulate view into fridge shelves and calculate depth
    of field of view into each shelf.
    
    Engine should be able to modify:
        number of shelves [no_shelves]
        height of shelves [h_shelf]
        height of person [h_person]
    
    The engine should provide results that measure the depth of field of view
    into each shelf. Results could be shown as a 3d input giving a colour field
    output in cartesian 3d. Output could be average depth or some other
    function of depths.
    
    I assume the distance from the fridge [d_fridge] will be modified by the
    h_person and the arm length [l_arm] and the door width [w_door]'''

'''Variables of input'''
h_base = 98
w_door = 48
h_door = 72 + h_base
d_doorshelf = -1
h_doorshelf = 8.5 + h_base
d_shelf = -38
no_shelves = np.random.randint(2,5)
h_shelf = np.array([0, (h_door - h_base)*0.8, (h_door - h_base)*0.4,
                    (h_door - h_base)*0.2, (h_door - h_base)*0.7,
                    h_door-h_base]) + h_base
h_shelf = np.array([h_base, h_door])
h_shelf = np.insert(h_shelf, 1, (np.random.randint(1,99,no_shelves)*0.01*(h_door - h_base) + h_base))
h_shelf
h_person = np.random.randint(150,185)
w_person = 46
l_arm = 46

'''ensure correct order of shelves'''
h_shelf = np.sort(h_shelf)

'''graph variables'''
r_head = 9
head_pos = d_doorshelf + d_shelf - (l_arm**2 - w_person**2*0.25)**0.5
#head_pos is the distance from the eye to the fridge back

'''making base diagram'''
#lines
#horizontal_lines 0 is the shelf, 1 is the frame
horizontal_lines = np.array([[0, d_shelf], [0, d_shelf + d_doorshelf]])
#vertical_lines 0 is the person body, 1 is the frame
vertical_lines = np.array([[0, h_person - 2 * r_head], [h_base, h_door]])
x_circ = -1*np.linspace(-1,1,101)*r_head + head_pos
y_circ = h_person - r_head + np.sqrt(np.abs(r_head**2-(x_circ-head_pos)**2))
y_circ_neg = h_person - r_head - np.sqrt(np.abs(r_head**2-(x_circ-head_pos)**2))
#horizontal plots
plt.plot(horizontal_lines[1], [h_base, h_base], 'b')
plt.plot(horizontal_lines[1], [h_door, h_door], 'b')
for i in range(1,np.size(h_shelf)-1):
    plt.plot(horizontal_lines[0], [h_shelf[i], h_shelf[i]], 'b')
#vertical plots
plt.plot([0,0], vertical_lines[1], 'b')
plt.plot([head_pos,head_pos], vertical_lines[0], 'k')

#other plots
plt.plot(x_circ, y_circ*np.ones(len(y_circ)), 'k')
plt.plot(x_circ, y_circ_neg*np.ones(len(y_circ)), 'k')

'''making view lines'''
gradients = (h_shelf[1:-1] - h_person + r_head) / (d_shelf - head_pos - r_head)
y_intercepts = h_person - r_head - gradients*(head_pos + r_head)
shelf_x_intercepts = (h_shelf[:-2] - y_intercepts)/gradients
#check for shelves above user
mask = np.where(shelf_x_intercepts < d_shelf)
shelf_x_intercepts2 = (h_shelf[2:] - y_intercepts)/gradients
shelf_x_intercepts[mask] = shelf_x_intercepts2[mask]


print('gradients = ', gradients, 'y_intercepts = ', y_intercepts,
      '\nshelf_x_intercepts = ', shelf_x_intercepts)
shelf_x_intercepts[shelf_x_intercepts > 0] = 0
for i in range(0,np.size(h_shelf)-2):
    plt.plot([head_pos + r_head, d_shelf], [h_person - r_head, h_shelf[i+1]], 'r--')
    plt.plot([head_pos + r_head, shelf_x_intercepts[i]],
             [h_person - r_head, gradients[i]*shelf_x_intercepts[i] + y_intercepts[i]], 'g--')

plt.gca().set_aspect('equal', adjustable='box')
plt.ylim(h_base-10, h_door + 10)
plt.xlim(head_pos-10, 10)
plt.xlabel('Distance from back of fridge, cm')
plt.ylabel('Height, cm')
plt.show()


plt.show()
